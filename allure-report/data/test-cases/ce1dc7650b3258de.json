{"uid":"ce1dc7650b3258de","name":"test_user_can_logout","fullName":"tests.test_logout#test_user_can_logout","historyId":"dd47cd50db4e8da40783d9e3eb2894fd","time":{"start":1757316482424,"stop":1757316482424,"duration":0},"status":"broken","statusMessage":"ValueError: There is no such driver by url https://api.github.com/repos/mozilla/geckodriver/releases/tags/0.34.0","statusTrace":"request = <SubRequest 'browser' for <Function test_success_login_opens_products_page>>\n\n    @pytest.fixture(scope=\"session\")\n    def browser(request: FixtureRequest) -> Generator[WebDriver, None, None]:\n        browser_name = cast(str, request.config.getoption(\"--browser\")).lower()\n        browser_version = cast(str, request.config.getoption(\"--browser-version\")).strip()\n        remote_url = cast(str, request.config.getoption(\"--remote-url\")).strip()\n    \n        tmp_profile: str | None = None  # чтобы корректно чистить только если был создан\n    \n        if browser_name == \"chrome\":\n            ch_options = ChromeOptions()\n            ch_options.add_argument(\"--window-size=1280,800\")\n            ch_options.add_argument(\"--incognito\")\n            ch_options.add_argument(\"--disable-sync\")\n            ch_options.add_argument(\"--disable-notifications\")\n            ch_options.add_argument(\"--disable-infobars\")\n            ch_options.add_argument(\"--no-first-run\")\n            ch_options.add_argument(\"--no-default-browser-check\")\n            ch_options.add_argument(\"--disable-extensions\")\n            ch_options.add_argument(\"--disable-popup-blocking\")\n            ch_options.add_argument(\"--password-store=basic\")\n    \n            # Чистый пользовательский каталог на каждый запуск\n            tmp_profile = tempfile.mkdtemp(prefix=\"chrome-profile-\")\n            ch_options.add_argument(f\"--user-data-dir={tmp_profile}\")\n    \n            # Максимально глушим менеджер паролей/проверку утечек/автозаполнение\n            ch_options.add_argument(\n                \"--disable-features=\"\n                \"PasswordCheck,PasswordLeakDetection,\"\n                \"PasswordManagerOnboarding,PasswordManagerRedesign,\"\n                \"AutofillServerCommunication,AutofillEnableAccountWalletStorage\",\n            )\n    \n            # Полезные prefs: не предлагать сохранять пароли/карты/профили\n            ch_prefs: dict[str, object] = {\n                \"credentials_enable_service\": False,\n                \"profile.password_manager_enabled\": False,\n                \"autofill.profile_enabled\": False,\n                \"autofill.credit_card_enabled\": False,\n                # на всякий: запрет нотификаций\n                \"profile.default_content_setting_values.notifications\": 2,\n            }\n            ch_options.add_experimental_option(\"prefs\", ch_prefs)\n            ch_options.add_experimental_option(\"excludeSwitches\", [\"enable-automation\", \"enable-logging\"])\n            ch_options.add_experimental_option(\"useAutomationExtension\", False)\n    \n            ch_service = ChromeService(ChromeDriverManager().install())\n            if remote_url:\n                # Remote/Selenoid: версия управляется через capabilities\n                caps = ch_options.to_capabilities()\n                if browser_version:\n                    caps[\"browserVersion\"] = browser_version\n                driver: WebDriver = Remote(command_executor=remote_url, options=ch_options)\n            else:\n                # Локально: ставим нужную версию драйвера (если указана)\n                ch_service = ChromeService(\n                    ChromeDriverManager(version=browser_version or None).install()\n                )\n                # чистый профиль только для локального Chrome\n    \n                tmp_profile = tempfile.mkdtemp(prefix=\"chrome-profile-\")\n                ch_options.add_argument(f\"--user-data-dir={tmp_profile}\")\n                driver = webdriver.Chrome(service=ch_service, options=ch_options)\n        else:\n            # Firefox\n            ff_options = FirefoxOptions()\n            ff_options.add_argument(\"--width=1280\")\n            ff_options.add_argument(\"--height=800\")\n    \n            # Аналогично отключаем менеджер паролей / автозаполнение / нотификации\n            ff_options.set_preference(\"signon.rememberSignons\", False)\n            ff_options.set_preference(\"signon.autofillForms\", False)\n            ff_options.set_preference(\"signon.generation.enabled\", False)\n            ff_options.set_preference(\"dom.webnotifications.enabled\", False)\n    \n            if remote_url:\n                caps = ff_options.to_capabilities()\n                if browser_version:\n                    caps[\"browserVersion\"] = browser_version\n                driver = Remote(command_executor=remote_url, options=ff_options)\n            else:\n                ff_service = FirefoxService(\n>                   GeckoDriverManager(version=browser_version or None).install()\n                )\n\nconftest.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\lib\\site-packages\\webdriver_manager\\firefox.py:39: in install\n    driver_path = self._get_driver_binary_path(self.driver)\n.venv\\lib\\site-packages\\webdriver_manager\\core\\manager.py:40: in _get_driver_binary_path\n    file = self._download_manager.download_file(driver.get_driver_download_url(os_type))\n.venv\\lib\\site-packages\\webdriver_manager\\drivers\\firefox.py:39: in get_driver_download_url\n    resp = self._http_client.get(\n.venv\\lib\\site-packages\\webdriver_manager\\core\\http.py:36: in get\n    self.validate_response(resp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresp = <Response [404]>\n\n    @staticmethod\n    def validate_response(resp: requests.Response):\n        status_code = resp.status_code\n        if status_code == 404:\n>           raise ValueError(f\"There is no such driver by url {resp.url}\")\nE           ValueError: There is no such driver by url https://api.github.com/repos/mozilla/geckodriver/releases/tags/0.34.0\n\n.venv\\lib\\site-packages\\webdriver_manager\\core\\http.py:15: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1757316479863,"stop":1757316482097,"duration":2234},"status":"broken","statusMessage":"ValueError: There is no such driver by url https://api.github.com/repos/mozilla/geckodriver/releases/tags/0.34.0\n","statusTrace":"  File \"C:\\Users\\zakco\\PycharmProjects\\PythonProject\\.venv\\lib\\site-packages\\pluggy\\_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n  File \"C:\\Users\\zakco\\PycharmProjects\\PythonProject\\.venv\\lib\\site-packages\\pluggy\\_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n  File \"C:\\Users\\zakco\\PycharmProjects\\PythonProject\\.venv\\lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n  File \"C:\\Users\\zakco\\PycharmProjects\\PythonProject\\.venv\\lib\\site-packages\\pluggy\\_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\zakco\\PycharmProjects\\PythonProject\\.venv\\lib\\site-packages\\_pytest\\fixtures.py\", line 1139, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"C:\\Users\\zakco\\PycharmProjects\\PythonProject\\.venv\\lib\\site-packages\\_pytest\\fixtures.py\", line 890, in call_fixture_func\n    fixture_result = next(generator)\n  File \"C:\\Users\\zakco\\PycharmProjects\\PythonProject\\conftest.py\", line 135, in browser\n    GeckoDriverManager(version=browser_version or None).install()\n  File \"C:\\Users\\zakco\\PycharmProjects\\PythonProject\\.venv\\lib\\site-packages\\webdriver_manager\\firefox.py\", line 39, in install\n    driver_path = self._get_driver_binary_path(self.driver)\n  File \"C:\\Users\\zakco\\PycharmProjects\\PythonProject\\.venv\\lib\\site-packages\\webdriver_manager\\core\\manager.py\", line 40, in _get_driver_binary_path\n    file = self._download_manager.download_file(driver.get_driver_download_url(os_type))\n  File \"C:\\Users\\zakco\\PycharmProjects\\PythonProject\\.venv\\lib\\site-packages\\webdriver_manager\\drivers\\firefox.py\", line 39, in get_driver_download_url\n    resp = self._http_client.get(\n  File \"C:\\Users\\zakco\\PycharmProjects\\PythonProject\\.venv\\lib\\site-packages\\webdriver_manager\\core\\http.py\", line 36, in get\n    self.validate_response(resp)\n  File \"C:\\Users\\zakco\\PycharmProjects\\PythonProject\\.venv\\lib\\site-packages\\webdriver_manager\\core\\http.py\", line 15, in validate_response\n    raise ValueError(f\"There is no such driver by url {resp.url}\")\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":true}],"afterStages":[],"labels":[{"name":"feature","value":"Сессия"},{"name":"story","value":"Logout"},{"name":"severity","value":"normal"},{"name":"tag","value":"logout"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_logout"},{"name":"host","value":"Zak"},{"name":"thread","value":"17780-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_logout"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["logout"]},"source":"ce1dc7650b3258de.json","parameterValues":[]}